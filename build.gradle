buildscript {
    ext.kotlin_version = "1.3.72"
    ext.tornadofx_version = "1.7.20"
    ext.junit_version = "5.6.2"
    ext.jackson_version = "2.11.0"

    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.1.0"
    }
}

subprojects {

    group = "no.uib.inf219"

    apply plugin: "kotlin"
    apply plugin: "application"
    apply plugin: "org.junit.platform.gradle.plugin"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8


    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "org.jetbrains:annotations:18.0.0"

        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:$junit_version"

        testImplementation "org.testfx:testfx-core:4.0.16-alpha"
        testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    }
}


project(":api") {
    version "1.0.0"
    dependencies {
        api "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
        api "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"

        implementation "commons-lang:commons-lang:2.6"
        implementation "com.google.guava:guava:28.2-jre"
        implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"
    }
}

project(":example") {
    version "1.0.0"
    ext {
        mainClassName = "no.uib.inf219.example.gui.Main"
    }

    dependencies {
        implementation project(":api")
        implementation "no.tornado:tornadofx:$tornadofx_version"
        implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"
    }

    jar {
        configurations.implementation.setCanBeResolved(true)
        manifest {
            attributes(
                    "Class-Path": configurations.implementation.collect { it.getName() }.join(" "),
                    "Main-Class": mainClassName
            )
        }
        from(configurations.implementation.collect { entry -> zipTree(entry) }) {
            exclude "META-INF/MANIFEST.MF"
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }
    }
}

project(":gui") {
    version "1.0.0"
    ext {
        mainClassName = "no.uib.inf219.gui.GuiMain"
    }
    dependencies {
        implementation project(":api")
        implementation "no.tornado:tornadofx:$tornadofx_version"
        implementation "org.apache.commons:commons-text:1.8"
        implementation "io.github.classgraph:classgraph:4.8.60"
        implementation 'me.xdrop:fuzzywuzzy:1.2.0' //TODO update to 1.3.0 when available
        implementation 'com.github.stuhlmeier:kotlin-events:v2.0'

        implementation 'org.controlsfx:controlsfx:8.40.16'
        implementation 'no.tornado:tornadofx-controlsfx:0.1.1'

        implementation "com.fasterxml.jackson.module:jackson-module-mrbean:$jackson_version"
        implementation "com.fasterxml.jackson.module:jackson-module-afterburner:$jackson_version"
        implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    }

    jar {
        configurations.implementation.setCanBeResolved(true)
        manifest {
            attributes(
                    "Class-Path": configurations.implementation.collect { it.getName() }.join(" "),
                    "Main-Class": mainClassName
            )
        }
        from(configurations.implementation.collect { entry -> zipTree(entry) }) {
            exclude "META-INF/MANIFEST.MF"
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }
    }
}
